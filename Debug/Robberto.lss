
Robberto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000050c  2**0
                  ALLOC
  2 .stab         00000828  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007b0  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	5c c1       	rjmp	.+696    	; 0x2cc <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	de c1       	rjmp	.+956    	; 0x3d4 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	27 c2       	rjmp	.+1102   	; 0x494 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
void right();

uint8_t safety_variable; // turn off engines when bluetooth connection is broken

int main()
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
	safety_variable = 0;
  50:	10 92 60 00 	sts	0x0060, r1
	led_blinking_init();
  54:	bb d0       	rcall	.+374    	; 0x1cc <led_blinking_init>
	ADC_init();
  56:	d6 d0       	rcall	.+428    	; 0x204 <ADC_init>
	USART_init();
  58:	eb d0       	rcall	.+470    	; 0x230 <USART_init>
	sei();
  5a:	78 94       	sei

	initialize_motors();
  5c:	01 d0       	rcall	.+2      	; 0x60 <initialize_motors>
  5e:	ff cf       	rjmp	.-2      	; 0x5e <main+0x16>

00000060 <initialize_motors>:

	return 0;
}

void initialize_motors()
{
  60:	df 93       	push	r29
  62:	cf 93       	push	r28
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
	DDRD |= MOTOR1_1 | MOTOR1_2 | MOTOR2_1 | MOTOR2_2;
  68:	a1 e3       	ldi	r26, 0x31	; 49
  6a:	b0 e0       	ldi	r27, 0x00	; 0
  6c:	e1 e3       	ldi	r30, 0x31	; 49
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	80 6f       	ori	r24, 0xF0	; 240
  74:	8c 93       	st	X, r24
	PORTD &= ~(MOTOR1_1 | MOTOR1_2 | MOTOR2_1 | MOTOR2_2);
  76:	a2 e3       	ldi	r26, 0x32	; 50
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	8f 70       	andi	r24, 0x0F	; 15
  82:	8c 93       	st	X, r24
}
  84:	cf 91       	pop	r28
  86:	df 91       	pop	r29
  88:	08 95       	ret

0000008a <forward>:

void forward()
{
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
	PORTD |= MOTOR1_2;
  92:	a2 e3       	ldi	r26, 0x32	; 50
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e2 e3       	ldi	r30, 0x32	; 50
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8c 93       	st	X, r24
	PORTD &= ~MOTOR1_1;
  a0:	a2 e3       	ldi	r26, 0x32	; 50
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e2 e3       	ldi	r30, 0x32	; 50
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8c 93       	st	X, r24
	PORTD |= MOTOR2_2;
  ae:	a2 e3       	ldi	r26, 0x32	; 50
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e2 e3       	ldi	r30, 0x32	; 50
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	8c 93       	st	X, r24
	PORTD &= ~MOTOR2_1;
  bc:	a2 e3       	ldi	r26, 0x32	; 50
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e2 e3       	ldi	r30, 0x32	; 50
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 7d       	andi	r24, 0xDF	; 223
  c8:	8c 93       	st	X, r24
}
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <backward>:

void backward()
{
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~MOTOR1_2;
  d8:	a2 e3       	ldi	r26, 0x32	; 50
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e2 e3       	ldi	r30, 0x32	; 50
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	8c 93       	st	X, r24
	PORTD |= MOTOR1_1;
  e6:	a2 e3       	ldi	r26, 0x32	; 50
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e2 e3       	ldi	r30, 0x32	; 50
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8c 93       	st	X, r24
	PORTD &= ~MOTOR2_2;
  f4:	a2 e3       	ldi	r26, 0x32	; 50
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e2 e3       	ldi	r30, 0x32	; 50
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8c 93       	st	X, r24
	PORTD |= MOTOR2_1;
 102:	a2 e3       	ldi	r26, 0x32	; 50
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e2 e3       	ldi	r30, 0x32	; 50
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8c 93       	st	X, r24
}
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <left>:

void left()
{
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	//1 engine forward, 2nd backward
	PORTD |= MOTOR1_2;
 11e:	a2 e3       	ldi	r26, 0x32	; 50
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e2 e3       	ldi	r30, 0x32	; 50
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	8c 93       	st	X, r24
	PORTD &= ~MOTOR1_1;
 12c:	a2 e3       	ldi	r26, 0x32	; 50
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e2 e3       	ldi	r30, 0x32	; 50
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 77       	andi	r24, 0x7F	; 127
 138:	8c 93       	st	X, r24
	PORTD &= ~MOTOR2_2;
 13a:	a2 e3       	ldi	r26, 0x32	; 50
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e2 e3       	ldi	r30, 0x32	; 50
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	8c 93       	st	X, r24
	PORTD |= MOTOR2_1;
 148:	a2 e3       	ldi	r26, 0x32	; 50
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e2 e3       	ldi	r30, 0x32	; 50
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 62       	ori	r24, 0x20	; 32
 154:	8c 93       	st	X, r24
}
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <right>:

void right()
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	PORTD &= ~MOTOR1_2;
 164:	a2 e3       	ldi	r26, 0x32	; 50
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e2 e3       	ldi	r30, 0x32	; 50
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 7b       	andi	r24, 0xBF	; 191
 170:	8c 93       	st	X, r24
	PORTD |= MOTOR1_1;
 172:	a2 e3       	ldi	r26, 0x32	; 50
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	e2 e3       	ldi	r30, 0x32	; 50
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	8c 93       	st	X, r24
	PORTD |= MOTOR2_2;
 180:	a2 e3       	ldi	r26, 0x32	; 50
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e2 e3       	ldi	r30, 0x32	; 50
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	8c 93       	st	X, r24
	PORTD &= ~MOTOR2_1;
 18e:	a2 e3       	ldi	r26, 0x32	; 50
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	e2 e3       	ldi	r30, 0x32	; 50
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8f 7d       	andi	r24, 0xDF	; 223
 19a:	8c 93       	st	X, r24
}
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <turn_off_all_motors>:

void turn_off_all_motors()
{
 1a2:	df 93       	push	r29
 1a4:	cf 93       	push	r28
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(LED_BLUETOOTH);
 1aa:	a8 e3       	ldi	r26, 0x38	; 56
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e8 e3       	ldi	r30, 0x38	; 56
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8e 7f       	andi	r24, 0xFE	; 254
 1b6:	8c 93       	st	X, r24
	PORTD &= ~(MOTOR1_1 | MOTOR1_2 | MOTOR2_1 | MOTOR2_2);
 1b8:	a2 e3       	ldi	r26, 0x32	; 50
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e2 e3       	ldi	r30, 0x32	; 50
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	8c 93       	st	X, r24
	return;
}
 1c6:	cf 91       	pop	r28
 1c8:	df 91       	pop	r29
 1ca:	08 95       	ret

000001cc <led_blinking_init>:

void led_blinking_init()
{
 1cc:	df 93       	push	r29
 1ce:	cf 93       	push	r28
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	DDRB |= LED_BLUE;
 1d4:	a7 e3       	ldi	r26, 0x37	; 55
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e7 e3       	ldi	r30, 0x37	; 55
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	8c 93       	st	X, r24

	// Timer 0 Configuration
	TCCR0 |= 0b101; // prescaler 1024
 1e2:	a3 e5       	ldi	r26, 0x53	; 83
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	e3 e5       	ldi	r30, 0x53	; 83
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	85 60       	ori	r24, 0x05	; 5
 1ee:	8c 93       	st	X, r24
	TIMSK |= 1; // interrupt
 1f0:	a9 e5       	ldi	r26, 0x59	; 89
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e9 e5       	ldi	r30, 0x59	; 89
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	8c 93       	st	X, r24
}
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <ADC_init>:

void ADC_init()
{
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0b11100101; // internal 2.56, ADC5, left adjustment
 20c:	e7 e2       	ldi	r30, 0x27	; 39
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	85 ee       	ldi	r24, 0xE5	; 229
 212:	80 83       	st	Z, r24
	ADCSRA = 0b11000111; // single mode, without interrupt, CLK / 128
 214:	e6 e2       	ldi	r30, 0x26	; 38
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	87 ec       	ldi	r24, 0xC7	; 199
 21a:	80 83       	st	Z, r24

	DDRB |= LED_BAT_GREEN1|LED_BAT_GREEN2|LED_BAT_RED|LED_BAT_YELLOW;
 21c:	a7 e3       	ldi	r26, 0x37	; 55
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e7 e3       	ldi	r30, 0x37	; 55
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8e 61       	ori	r24, 0x1E	; 30
 228:	8c 93       	st	X, r24
}
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <USART_init>:

void USART_init()
{
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0b10;
 238:	e1 e3       	ldi	r30, 0x31	; 49
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 83       	st	Z, r24
	PORTD = 0;
 240:	e2 e3       	ldi	r30, 0x32	; 50
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	10 82       	st	Z, r1

	DDRB |= LED_BLUETOOTH;
 246:	a7 e3       	ldi	r26, 0x37	; 55
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e7 e3       	ldi	r30, 0x37	; 55
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	81 60       	ori	r24, 0x01	; 1
 252:	8c 93       	st	X, r24
	UBRRL = 12;
 254:	e9 e2       	ldi	r30, 0x29	; 41
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	80 83       	st	Z, r24
	UBRRH = 0;
 25c:	e0 e4       	ldi	r30, 0x40	; 64
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	10 82       	st	Z, r1
	UCSRA = (1 << U2X);
 262:	eb e2       	ldi	r30, 0x2B	; 43
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	80 83       	st	Z, r24
	// Enable Receiver and Transmitter
	UCSRB = (1 << RXCIE) | (1 << RXEN) | (1 << TXEN);
 26a:	ea e2       	ldi	r30, 0x2A	; 42
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	88 e9       	ldi	r24, 0x98	; 152
 270:	80 83       	st	Z, r24
	// 8 data, 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
 272:	e0 e4       	ldi	r30, 0x40	; 64
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	86 e8       	ldi	r24, 0x86	; 134
 278:	80 83       	st	Z, r24
}
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
 280:	df 93       	push	r29
 282:	cf 93       	push	r28
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 28c:	eb e2       	ldi	r30, 0x2B	; 43
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	80 72       	andi	r24, 0x20	; 32
 298:	90 70       	andi	r25, 0x00	; 0
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	b9 f3       	breq	.-18     	; 0x28c <USART_Transmit+0xc>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 29e:	ec e2       	ldi	r30, 0x2C	; 44
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	80 83       	st	Z, r24
}
 2a6:	0f 90       	pop	r0
 2a8:	cf 91       	pop	r28
 2aa:	df 91       	pop	r29
 2ac:	08 95       	ret

000002ae <USART_Receive>:

unsigned char USART_Receive( void )
{
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
 2b6:	eb e2       	ldi	r30, 0x2B	; 43
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	88 23       	and	r24, r24
 2be:	dc f7       	brge	.-10     	; 0x2b6 <USART_Receive+0x8>
	/* Get and return received data from buffer */
	return UDR;
 2c0:	ec e2       	ldi	r30, 0x2C	; 44
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
}
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <__vector_9>:

ISR (TIMER0_OVF_vect) // diode blinking + ADC read, safety_variable
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
	if (safety_variable >= 3)
 2f6:	80 91 60 00 	lds	r24, 0x0060
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	08 f0       	brcs	.+2      	; 0x300 <__vector_9+0x34>
			turn_off_all_motors();
 2fe:	51 df       	rcall	.-350    	; 0x1a2 <turn_off_all_motors>
	safety_variable++;
 300:	80 91 60 00 	lds	r24, 0x0060
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 60 00 	sts	0x0060, r24

	PORTB ^= LED_BLUE;
 30a:	a8 e3       	ldi	r26, 0x38	; 56
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e8 e3       	ldi	r30, 0x38	; 56
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	90 81       	ld	r25, Z
 314:	80 e4       	ldi	r24, 0x40	; 64
 316:	89 27       	eor	r24, r25
 318:	8c 93       	st	X, r24

	if (ADCH >= 118) // 13 V
 31a:	e5 e2       	ldi	r30, 0x25	; 37
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	86 37       	cpi	r24, 0x76	; 118
 322:	40 f0       	brcs	.+16     	; 0x334 <__vector_9+0x68>
		PORTB |= LED_BAT_GREEN1|LED_BAT_GREEN2|LED_BAT_RED|LED_BAT_YELLOW;
 324:	a8 e3       	ldi	r26, 0x38	; 56
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e8 e3       	ldi	r30, 0x38	; 56
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8e 61       	ori	r24, 0x1E	; 30
 330:	8c 93       	st	X, r24
 332:	36 c0       	rjmp	.+108    	; 0x3a0 <__vector_9+0xd4>
	else if (ADCH >= 113) // 12,5 V
 334:	e5 e2       	ldi	r30, 0x25	; 37
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	81 37       	cpi	r24, 0x71	; 113
 33c:	78 f0       	brcs	.+30     	; 0x35c <__vector_9+0x90>
	{
		PORTB |= LED_BAT_GREEN2 | LED_BAT_YELLOW | LED_BAT_RED;
 33e:	a8 e3       	ldi	r26, 0x38	; 56
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	e8 e3       	ldi	r30, 0x38	; 56
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	8e 60       	ori	r24, 0x0E	; 14
 34a:	8c 93       	st	X, r24
		PORTB &= ~LED_BAT_GREEN1;
 34c:	a8 e3       	ldi	r26, 0x38	; 56
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e8 e3       	ldi	r30, 0x38	; 56
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	8f 7e       	andi	r24, 0xEF	; 239
 358:	8c 93       	st	X, r24
 35a:	22 c0       	rjmp	.+68     	; 0x3a0 <__vector_9+0xd4>
	}
	else if (ADCH >= 109) // 12 V
 35c:	e5 e2       	ldi	r30, 0x25	; 37
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	8d 36       	cpi	r24, 0x6D	; 109
 364:	78 f0       	brcs	.+30     	; 0x384 <__vector_9+0xb8>
	{
		PORTB |= LED_BAT_YELLOW | LED_BAT_RED;
 366:	a8 e3       	ldi	r26, 0x38	; 56
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e8 e3       	ldi	r30, 0x38	; 56
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	86 60       	ori	r24, 0x06	; 6
 372:	8c 93       	st	X, r24
		PORTB &= ~(LED_BAT_GREEN1 | LED_BAT_GREEN2);
 374:	a8 e3       	ldi	r26, 0x38	; 56
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e8 e3       	ldi	r30, 0x38	; 56
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	87 7e       	andi	r24, 0xE7	; 231
 380:	8c 93       	st	X, r24
 382:	0e c0       	rjmp	.+28     	; 0x3a0 <__vector_9+0xd4>
	}
	else
	{
		PORTB |= LED_BAT_RED;
 384:	a8 e3       	ldi	r26, 0x38	; 56
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e8 e3       	ldi	r30, 0x38	; 56
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	8c 93       	st	X, r24
		PORTB &= ~(LED_BAT_GREEN1 | LED_BAT_GREEN2 | LED_BAT_YELLOW);
 392:	a8 e3       	ldi	r26, 0x38	; 56
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e8 e3       	ldi	r30, 0x38	; 56
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	83 7e       	andi	r24, 0xE3	; 227
 39e:	8c 93       	st	X, r24
	}

	ADCSRA |= 0b01000000;
 3a0:	a6 e2       	ldi	r26, 0x26	; 38
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e6 e2       	ldi	r30, 0x26	; 38
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 64       	ori	r24, 0x40	; 64
 3ac:	8c 93       	st	X, r24
}
 3ae:	cf 91       	pop	r28
 3b0:	df 91       	pop	r29
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_11>:

ISR (USART_RXC_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	df 93       	push	r29
 3f8:	cf 93       	push	r28
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <__vector_11+0x28>
 3fc:	0f 92       	push	r0
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
	PORTB |= LED_BLUETOOTH;
 402:	a8 e3       	ldi	r26, 0x38	; 56
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e8 e3       	ldi	r30, 0x38	; 56
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	8c 93       	st	X, r24
	unsigned char data = USART_Receive();
 410:	4e df       	rcall	.-356    	; 0x2ae <USART_Receive>
 412:	89 83       	std	Y+1, r24	; 0x01
	safety_variable=0;
 414:	10 92 60 00 	sts	0x0060, r1

	switch (data)
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	3b 83       	std	Y+3, r19	; 0x03
 420:	2a 83       	std	Y+2, r18	; 0x02
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	9b 81       	ldd	r25, Y+3	; 0x03
 426:	84 34       	cpi	r24, 0x44	; 68
 428:	91 05       	cpc	r25, r1
 42a:	d9 f0       	breq	.+54     	; 0x462 <__stack+0x3>
 42c:	2a 81       	ldd	r18, Y+2	; 0x02
 42e:	3b 81       	ldd	r19, Y+3	; 0x03
 430:	25 34       	cpi	r18, 0x45	; 69
 432:	31 05       	cpc	r19, r1
 434:	34 f4       	brge	.+12     	; 0x442 <__vector_11+0x6e>
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	9b 81       	ldd	r25, Y+3	; 0x03
 43a:	81 34       	cpi	r24, 0x41	; 65
 43c:	91 05       	cpc	r25, r1
 43e:	79 f0       	breq	.+30     	; 0x45e <__vector_11+0x8a>
 440:	12 c0       	rjmp	.+36     	; 0x466 <__stack+0x7>
 442:	2a 81       	ldd	r18, Y+2	; 0x02
 444:	3b 81       	ldd	r19, Y+3	; 0x03
 446:	23 35       	cpi	r18, 0x53	; 83
 448:	31 05       	cpc	r19, r1
 44a:	39 f0       	breq	.+14     	; 0x45a <__vector_11+0x86>
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	9b 81       	ldd	r25, Y+3	; 0x03
 450:	87 35       	cpi	r24, 0x57	; 87
 452:	91 05       	cpc	r25, r1
 454:	41 f4       	brne	.+16     	; 0x466 <__stack+0x7>
	{
	case 'W':
		forward();
 456:	19 de       	rcall	.-974    	; 0x8a <forward>
 458:	07 c0       	rjmp	.+14     	; 0x468 <__stack+0x9>
		break;
	case 'S':
		backward();
 45a:	3a de       	rcall	.-908    	; 0xd0 <backward>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <__stack+0x9>
		break;
	case 'A':
		left();
 45e:	5b de       	rcall	.-842    	; 0x116 <left>
 460:	03 c0       	rjmp	.+6      	; 0x468 <__stack+0x9>
		break;
	case 'D':
		right();
 462:	7c de       	rcall	.-776    	; 0x15c <right>
 464:	01 c0       	rjmp	.+2      	; 0x468 <__stack+0x9>
		break;
	default:
		turn_off_all_motors();
 466:	9d de       	rcall	.-710    	; 0x1a2 <turn_off_all_motors>
	}
}
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	cf 91       	pop	r28
 470:	df 91       	pop	r29
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
