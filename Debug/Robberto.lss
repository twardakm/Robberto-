
Robberto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000450  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ba  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	4c c0       	rjmp	.+152    	; 0xac <__vector_9>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	a9 c0       	rjmp	.+338    	; 0x188 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

void led_blinking_init();
void ADC_init();

int main()
{
  38:	df 93       	push	r29
  3a:	cf 93       	push	r28
  3c:	cd b7       	in	r28, 0x3d	; 61
  3e:	de b7       	in	r29, 0x3e	; 62
	led_blinking_init();
  40:	03 d0       	rcall	.+6      	; 0x48 <led_blinking_init>
	ADC_init();
  42:	1e d0       	rcall	.+60     	; 0x80 <ADC_init>
	sei();
  44:	78 94       	sei
  46:	ff cf       	rjmp	.-2      	; 0x46 <__SREG__+0x7>

00000048 <led_blinking_init>:

	return 0;
}

void led_blinking_init()
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	cd b7       	in	r28, 0x3d	; 61
  4e:	de b7       	in	r29, 0x3e	; 62
	DDRB |= LED_BLUE;
  50:	a7 e3       	ldi	r26, 0x37	; 55
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	e7 e3       	ldi	r30, 0x37	; 55
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	80 64       	ori	r24, 0x40	; 64
  5c:	8c 93       	st	X, r24

	// Timer 0 Configuration
	TCCR0 |= 0b101; // prescaler 1024
  5e:	a3 e5       	ldi	r26, 0x53	; 83
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	e3 e5       	ldi	r30, 0x53	; 83
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	85 60       	ori	r24, 0x05	; 5
  6a:	8c 93       	st	X, r24
	TIMSK |= 1; // interrupt
  6c:	a9 e5       	ldi	r26, 0x59	; 89
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	e9 e5       	ldi	r30, 0x59	; 89
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	80 81       	ld	r24, Z
  76:	81 60       	ori	r24, 0x01	; 1
  78:	8c 93       	st	X, r24
}
  7a:	cf 91       	pop	r28
  7c:	df 91       	pop	r29
  7e:	08 95       	ret

00000080 <ADC_init>:

void ADC_init()
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0b11100101; // internal 2.56, ADC5, left adjustment
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	85 ee       	ldi	r24, 0xE5	; 229
  8e:	80 83       	st	Z, r24
	ADCSRA = 0b11000111; // single mode, without interrupt, CLK / 128
  90:	e6 e2       	ldi	r30, 0x26	; 38
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	87 ec       	ldi	r24, 0xC7	; 199
  96:	80 83       	st	Z, r24

	DDRB |= LED_BAT_GREEN1|LED_BAT_GREEN2|LED_BAT_RED|LED_BAT_YELLOW;
  98:	a7 e3       	ldi	r26, 0x37	; 55
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e7 e3       	ldi	r30, 0x37	; 55
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8e 61       	ori	r24, 0x1E	; 30
  a4:	8c 93       	st	X, r24
}
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <__vector_9>:

ISR (TIMER0_OVF_vect) // diode blinking + ADC read
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= LED_BLUE;
  ca:	a8 e3       	ldi	r26, 0x38	; 56
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e8 e3       	ldi	r30, 0x38	; 56
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	89 27       	eor	r24, r25
  d8:	8c 93       	st	X, r24

	if (ADCH >= 118) // 13 V
  da:	e5 e2       	ldi	r30, 0x25	; 37
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	86 37       	cpi	r24, 0x76	; 118
  e2:	40 f0       	brcs	.+16     	; 0xf4 <__vector_9+0x48>
		PORTB |= LED_BAT_GREEN1|LED_BAT_GREEN2|LED_BAT_RED|LED_BAT_YELLOW;
  e4:	a8 e3       	ldi	r26, 0x38	; 56
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e8 e3       	ldi	r30, 0x38	; 56
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	8e 61       	ori	r24, 0x1E	; 30
  f0:	8c 93       	st	X, r24
  f2:	36 c0       	rjmp	.+108    	; 0x160 <__vector_9+0xb4>
	else if (ADCH >= 113) // 12,5 V
  f4:	e5 e2       	ldi	r30, 0x25	; 37
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 37       	cpi	r24, 0x71	; 113
  fc:	78 f0       	brcs	.+30     	; 0x11c <__vector_9+0x70>
	{
		PORTB |= LED_BAT_GREEN2 | LED_BAT_YELLOW | LED_BAT_RED;
  fe:	a8 e3       	ldi	r26, 0x38	; 56
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e8 e3       	ldi	r30, 0x38	; 56
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8e 60       	ori	r24, 0x0E	; 14
 10a:	8c 93       	st	X, r24
		PORTB &= ~LED_BAT_GREEN1;
 10c:	a8 e3       	ldi	r26, 0x38	; 56
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e8 e3       	ldi	r30, 0x38	; 56
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8f 7e       	andi	r24, 0xEF	; 239
 118:	8c 93       	st	X, r24
 11a:	22 c0       	rjmp	.+68     	; 0x160 <__vector_9+0xb4>
	}
	else if (ADCH >= 109) // 12 V
 11c:	e5 e2       	ldi	r30, 0x25	; 37
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8d 36       	cpi	r24, 0x6D	; 109
 124:	78 f0       	brcs	.+30     	; 0x144 <__vector_9+0x98>
	{
		PORTB |= LED_BAT_YELLOW | LED_BAT_RED;
 126:	a8 e3       	ldi	r26, 0x38	; 56
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e8 e3       	ldi	r30, 0x38	; 56
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	86 60       	ori	r24, 0x06	; 6
 132:	8c 93       	st	X, r24
		PORTB &= ~(LED_BAT_GREEN1 | LED_BAT_GREEN2);
 134:	a8 e3       	ldi	r26, 0x38	; 56
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e8 e3       	ldi	r30, 0x38	; 56
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	87 7e       	andi	r24, 0xE7	; 231
 140:	8c 93       	st	X, r24
 142:	0e c0       	rjmp	.+28     	; 0x160 <__vector_9+0xb4>
	}
	else
	{
		PORTB |= LED_BAT_RED;
 144:	a8 e3       	ldi	r26, 0x38	; 56
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e8 e3       	ldi	r30, 0x38	; 56
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	8c 93       	st	X, r24
		PORTB &= ~(LED_BAT_GREEN1 | LED_BAT_GREEN2 | LED_BAT_YELLOW);
 152:	a8 e3       	ldi	r26, 0x38	; 56
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e8 e3       	ldi	r30, 0x38	; 56
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	83 7e       	andi	r24, 0xE3	; 227
 15e:	8c 93       	st	X, r24
	}

	ADCSRA |= 0b01000000;
 160:	a6 e2       	ldi	r26, 0x26	; 38
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e6 e2       	ldi	r30, 0x26	; 38
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	8c 93       	st	X, r24
}
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
